#!/usr/bin/env node
'use strict';
/**
 * Module dependencies.
 */

const env = require('../environment'),
  app = require('../app'),
  log = require('debug-logger')('www'),
  http = require('http');

/**
 * Get port from environment and store in Express.
 */

app.set('port', env.port());

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(env.port());

/**
 * Event listener for HTTP server "error" event.
 */

const onError = error => {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = `Port ${env.port()}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      log.error(`${bind} requires elevated privileges`);
      process.exit(1);
      break;
    case 'EADDRINUSE':
      log.error(`${bind} is already in use`);
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => log.info(`Listening on port ${env.port()}`);

server.on('error', onError);
server.on('listening', onListening);
